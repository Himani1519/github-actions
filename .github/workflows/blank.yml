name: Build Core
on:
  push:
    branches:
      - v2.x/staging
  pull_request:
    types: [opened, reopened, synchronize]



jobs:

  update-changelog:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      was_updated: ${{ steps.check-change.outputs.change_detected }}
      check_commit: ${{ steps.check-changelog.outputs.check_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # - name: Check for updated CHANGELOG.md using git
      #   id: check-changelog
      #   run: |
      #     if git diff --name-only origin/${{ github.base_ref }} | grep -q "^CHANGELOG.md$"; then
      #       echo "CHANGELOG.md has been updated."
      #       echo "::set-output name=check_commit::true"
      #     else
      #       echo "ERROR: CHANGELOG.md has not been updated."
      #       echo "::set-output name=check_commit::false"
      #     fi
      - name: Extract and Compare PR description with template
        run: |
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
          jq -r .body)
          
          echo "$PR_BODY" > /tmp/original_pr.txt
      
          # Use Node.js to sanitize and extract the entire PR description content
          node <<EOF > /tmp/sanitized_pr_description.txt
          const fs = require('fs');
          let content = fs.readFileSync('/tmp/original_pr.txt', 'utf8');
          content = content.replace(/`/g, "'");  // Replace backticks with single quotes
          console.log(content);
          EOF
      
          # Save the template content to a file
          TEMPLATE_CONTENT=$(sed 's/"//g' .github/pull_request_template.md)
          echo "$TEMPLATE_CONTENT" > /tmp/template_content.txt
      
          # Compare using diff
          if diff /tmp/sanitized_pr_description.txt /tmp/template_content.txt > /dev/null; then
            echo "ERROR: Sanitized PR description is identical to the template."
            exit 1
          else
            echo "Sanitized PR description and template are different."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    
      - name: Compare PR description with template
        run: |
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
          jq -r .body)
      
          # Use Node.js to sanitize
          SANITIZED_DESCRIPTION=$(node -e 'const input = process.argv[1]; console.log(input.replace(/`/g, ""));' "$PR_BODY")
      
          # Save the sanitized PR description for later steps
          echo "$SANITIZED_DESCRIPTION" > /tmp/pr_description.txt
      
          # Compare using diff
          TEMPLATE_CONTENT=$(sed 's/"//g' .github/pull_request_template.md)
          echo "$TEMPLATE_CONTENT" > /tmp/template_content.txt
      
          if diff /tmp/pr_description.txt /tmp/template_content.txt > /dev/null; then
            echo "ERROR: Sanitized PR description is identical to the template."
            exit 1
          else
            echo "Sanitized PR description and template are different."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      
      - name: Check PR body against changelog
        run: |
          ESCAPED_CHANGELOG="${{ steps.extract-changelog.outputs.changelog }}"
          ESCAPED_CHANGELOG=$(echo "$ESCAPED_CHANGELOG" | sed "s/'/\\\\'/g")
          VERSION="${{ steps.extract-changelog.outputs.version }}"
      
          if ! grep -Fq "$ESCAPED_CHANGELOG" CHANGELOG.md; then
            # Check if version exists in CHANGELOG.md
            if grep -q "^## $VERSION" CHANGELOG.md; then
              # Append PR description to existing version
              sed -i "/^## $VERSION/a - $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})" CHANGELOG.md
            else
              # Append new version and PR description
              ANCHOR_LINE=$(awk '/All notable changes to the Zlux App Server package will be documented in this file\./ {print NR}' CHANGELOG.md)
              sed -i "$ANCHOR_LINE a\\
              \n## $VERSION\n- $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})\n" CHANGELOG.md
            fi
            git config --global user.email "zowe-robot@users.noreply.github.com"
            git config --global user.name "Zowe Robot"
            git add CHANGELOG.md
            git commit -s -m "Update changelog with PR #${{ github.event.pull_request.number }} description"
            git push
          fi
      
      - name: check for changes
        id: check-change
        run: |
          if git diff --name-only HEAD^ HEAD | grep 'changelog.md'; then
            echo "No Changes detected, setting flag to false"
            echo "::set-output name=change_detected::false"
          else
            echo "::set-output name=change_detected::true"
            fi
  check_changelog:
    if: github.event_name == 'pull_request'
    needs: update-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify Changelog update
        run: |
          if [ "${{ needs.update-changelog.outputs.was_updated }}" != "true" ]; then
            echo "CHANGELOG.md not updated, please update CHANGELOG.md with the changes made in the pull request"
            exit 1
          else
            echo "changelog was updated successfully."
          fi
 
