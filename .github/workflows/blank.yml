name: Build Core
on:
  push:
    branches:
      - v2.x/staging
  pull_request:
    types: [opened, reopened, synchronize]



jobs:

  update-changelog:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      was_updated: ${{ steps.check-change.outputs.change_detected }}
      check_commit: ${{ steps.check-changelog.outputs.check_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # - name: Check for updated CHANGELOG.md using git
      #   id: check-changelog
      #   run: |
      #     if git diff --name-only origin/${{ github.base_ref }} | grep -q "^CHANGELOG.md$"; then
      #       echo "CHANGELOG.md has been updated."
      #       echo "::set-output name=check_commit::true"
      #     else
      #       echo "ERROR: CHANGELOG.md has not been updated."
      #       echo "::set-output name=check_commit::false"
      #     fi
      - name: Compare PR description with template
        env:
          PR_DESCRIPTION: ${{ github.event.pull_request.body }}
        run: |
          # Safely print the PR description using Node.js
          node -e 'const prDesc = process.env.PR_DESCRIPTION; console.log("----- PR Description Start -----\n" + prDesc + "\n----- PR Description End -----");'
          echo "$PR_DESCRIPTION" > /tmp/pr_description.txt
          echo "PR DESCRIPTION saved to /tmp/pr_description.txt."
      
          # Save the template content to a file without modifying it
          cat .github/pull_request_template.md > /tmp/template_content.txt
          echo "Template content saved to /tmp/template_content.txt."
      
          # Print the template content
          echo "----- Template Start -----"
          cat /tmp/template_content.txt
          echo "----- Template End -----"
              
          # Use diff to compare the two files
          if diff -wB /tmp/pr_description.txt /tmp/template_content.txt > /dev/null; then
            echo "ERROR: PR description is identical to the template."
            exit 1
          else
            echo "PR description and template are different."
          fi


    
      - name: Extract changelog info using Node.js
        id: extract-changelog
        run: |
          PR_DESCRIPTION=$(cat /tmp/pr_description.txt)
          
          # Check if "changelog:" exists in PR description
          if echo "$PR_DESCRIPTION" | grep -q "VERSION:" && echo "$PR_DESCRIPTION" | grep -q "CHANGELOG:"; then
            
            # Extract content after "changelog:" using Node.js
            CHANGELOG_TEXT=$(node -e "const lines = process.env.PR_DESCRIPTION.split('\n'); \
            for (const line of lines) { \
              if (line.startsWith('CHANGELOG: ')) { \
                console.log(line.substring('CHANGELOG: '.length)); \
                break; \
              } \
            }")
      
      
            # Extract VERSION: from PR description
            VERSION=$(echo "$PR_DESCRIPTION" | grep -oP 'VERSION:\s*\Kv\d+\.\d+\.\d+')
      
            echo "Extracted changelog: $CHANGELOG_TEXT"
            echo "::set-output name=changelog::$CHANGELOG_TEXT"
            echo "::set-output name=version::$VERSION"
            
          else
            echo -e "No changelog and version information found in PR description. Please add them.\nExpected Format:\nVERSION:vX.XX.X\nCHANGELOG:This is changelog note.\nTo re-run the action, just make a push or commit after updating the PR description or updating the changelog via a manual file changing commit."
            exit 1
          fi
      
        env:
          PR_DESCRIPTION: ${{ env.PR_DESCRIPTION }}
      
      - name: Check PR body against changelog
        run: |         
          # Print the raw PR changelog description
          echo "Direct output: ${{ steps.extract-changelog.outputs.changelog }}"

          # # Convert backticks to single quotes
          # ESCAPED_CHANGELOG=$(echo "${{ steps.extract-changelog.outputs.changelog }}" | sed "s/\`/'/g")
          # echo "Raw CHANGELOG Input: $ESCAPED_CHANGELOG"
          # ESCAPED_CHANGELOG=$(echo "$ESCAPED_CHANGELOG" | sed "s/\`/'/g")
          # echo "Transformed CHANGELOG Input: $ESCAPED_CHANGELOG"
          # sed -i "/^## $VERSION/a - $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})" CHANGELOG.md
          
          # VERSION="${{ steps.extract-changelog.outputs.version }}"
          
          # if ! grep -Fq "$ESCAPED_CHANGELOG" CHANGELOG.md; then
          #   # Check if version exists in CHANGELOG.md
          #   if grep -q "^## $VERSION" CHANGELOG.md; then
          #     # Append PR description to existing version
          #     sed -i "/^## $VERSION/a - $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})" CHANGELOG.md
          #   else
          #     # Append new version and PR description
          #     ANCHOR_LINE=$(awk '/All notable changes to the Zlux App Server package will be documented in this file\./ {print NR}' CHANGELOG.md)
          #     sed -i "$ANCHOR_LINE a\\
          #     \n## $VERSION\n- $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})\n" CHANGELOG.md
          #   fi
          #   git config --global user.email "zowe-robot@users.noreply.github.com"
          #   git config --global user.name "Zowe Robot"
          #   git add CHANGELOG.md
          #   git commit -s -m "Update changelog with PR #${{ github.event.pull_request.number }} description"
          #   git push
          # fi


      - name: check for changes
        id: check-change
        run: |
          if git diff --name-only HEAD^ HEAD | grep 'changelog.md'; then
            echo "No Changes detected, setting flag to false"
            echo "::set-output name=change_detected::false"
          else
            echo "::set-output name=change_detected::true"
            fi
  check_changelog:
    if: github.event_name == 'pull_request'
    needs: update-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify Changelog update
        run: |
          if [ "${{ needs.update-changelog.outputs.was_updated }}" != "true" ]; then
            echo "CHANGELOG.md not updated, please update CHANGELOG.md with the changes made in the pull request"
            exit 1
          else
            echo "changelog was updated successfully."
          fi
 
